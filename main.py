# -*- coding: utf-8 -*-
import os
import time
import re
import json
import telebot
import schedule
import gitlab
from threading import Thread

TOKEN = os.getenv('BOT_TOKEN')
G_TOKEN = os.getenv('GITLAB_PAT')
CHANNEL_ID = '@letovo_quotes'
MOD_ID = -1001791070494
BAN_TIME = 3600

bot = telebot.TeleBot(TOKEN)
gl = gitlab.Gitlab('https://gitlab.com', private_token=G_TOKEN)
project = gl.projects.get(35046550)
sent_quotes = {}
call_count = 0

_banlist = open('banlist.json', 'wb')
try:
    project.files.raw(file_path='banlist.json', ref='main', streamed=True, action=_banlist.write)
except gitlab.exceptions.GitlabGetError:
    pass
_banlist.close()

_queue = open('queue.json', 'wb')
try:
    project.files.raw(file_path='queue.json', ref='main', streamed=True, action=_queue.write)
except gitlab.exceptions.GitlabGetError:
    pass
_queue.close()


def format_time(value):
    return time.strftime("%H:%M:%S", time.gmtime(value))


def push_gitlab(filename):
    file = open(filename, 'r', encoding='utf-8')
    data = file.read()
    action = 'create'
    for i in project.repository_tree():
        if i['name'] == filename:
            action = 'update'
            break
    payload = {
        'branch': 'main',
        'commit_message': 'Update',
        'actions': [
            {
                'action': action,
                'file_path': filename,
                'content': data,
            }
        ]
    }
    project.commits.create(payload)
    file.close()


def open_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = dict(json.load(file))
    except json.decoder.JSONDecodeError:
        data = dict()
    return data


def save_json(data, filename):
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False)


def publish_quote():
    queue = open_json('queue.json')

    if queue == dict():
        bot.send_message(MOD_ID, text='–¶–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! :(')
        return

    bot.send_message(CHANNEL_ID, text=queue['0'])

    for key in range(len(queue.keys()) - 1):
        queue[str(key)] = queue[str(int(key) + 1)]
    queue.pop(str(len(queue.keys()) - 1))

    save_json(queue, 'queue.json')
    push_gitlab('queue.json')


@bot.message_handler(commands=['start'])
def hello(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ "–ó–∞–±–∞–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –õ–µ—Ç–æ–≤–æ". –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É: '
                     'https://t.me/letovo_quotes. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å–µ, —á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–º (—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /suggest), –≥–ª–∞–≤–Ω–æ–µ, —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã :)')


@bot.message_handler(commands=['suggest'])
def suggest(message):
    global sent_quotes, call_count
    quote = message.text[9:]
    author = message.from_user.username
    author_id = str(message.from_user.id)
    if author is None:
        author = message.from_user.first_name + ' ' + message.from_user.last_name
    if quote:
        banlist = open_json('banlist.json')
        if author_id in banlist.keys() and int(time.time()) > banlist[author_id] + BAN_TIME:
            banlist.pop(author_id)
            save_json(banlist, 'banlist.json')
            push_gitlab('banlist.json')
        if author_id not in banlist.keys():
            bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—é —Ü–∏—Ç–∞—Ç—É –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É :)')
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton(text='üîî –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'publish: {call_count}'))
            sent_quotes.update({call_count: quote})
            call_count += 1
            keyboard.add(telebot.types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='reject'))
            bot.send_message(MOD_ID,
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{author} [ID: {author_id}] –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote}',
                             reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id,
                             f'–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {format_time(BAN_TIME - int(time.time()) + banlist[author_id])}')
    else:
        bot.send_message(message.chat.id,
                         '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É. –í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /suggest –∏ –∂–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. '
                         '–ò, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏ –µ—Ä—É–Ω–¥—É!')


@bot.message_handler(commands=['ban'])
def ban(message):
    if message.chat.id == MOD_ID:
        user_id = message.text[4:].replace(' ', '')
        if not user_id.isdigit():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        banlist = open_json('banlist.json')

        banlist.update({user_id: int(time.time())})

        save_json(banlist, 'banlist.json')
        push_gitlab('banlist.json')
        bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['unban'])
def unban(message):
    if message.chat.id == MOD_ID:
        user_id = message.text[6:].replace(' ', '')
        if not user_id.isdigit():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        banlist = open_json('banlist.json')

        if user_id not in banlist.keys():
            bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        else:
            banlist.pop(user_id)

        save_json(banlist, 'banlist.json')
        push_gitlab('banlist.json')
        bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['queue'])
def add_queue(message):
    if message.chat.id == MOD_ID:
        if len(message.text) == 6:
            bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä!')
            return
        queue = open_json('queue.json')

        next_quote_id = len(queue.keys())
        quote = message.text[7:]
        queue.update({str(next_quote_id): quote})

        save_json(queue, 'queue.json')
        push_gitlab('queue.json')
        bot.send_message(MOD_ID, '–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get_queue'])
def get_queue(message):
    if message.chat.id == MOD_ID:
        queue = open_json('queue.json')
        for quote_id, quote in queue.items():
            bot.send_message(MOD_ID, f'#*{quote_id}*\n{quote}', parse_mode='Markdown')
        if queue == dict():
            bot.send_message(MOD_ID, '–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get_banlist'])
def get_banlist(message):
    if message.chat.id == MOD_ID:
        banlist = open_json('banlist.json')

        if banlist == dict():
            bot.send_message(MOD_ID, '–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!')
            return
        bot.send_message(MOD_ID, 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ -> –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
        for key, value in banlist.items():
            bot.send_message(MOD_ID, key + ': ' + format_time(int(value)) + ' -> ' + format_time(int(value) + BAN_TIME))
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['del_queue'])
def del_queue(message):
    if message.chat.id == MOD_ID:
        if len(message.text) == 10:
            bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä!')
            return

        queue = open_json('queue.json')

        quote_id = message.text[10:].replace(' ', '')
        if quote_id not in queue.keys():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        for key in range(int(quote_id), len(queue.keys()) - 1):
            queue[str(key)] = queue[str(int(key) + 1)]
        queue.pop(str(len(queue.keys()) - 1))

        save_json(queue, 'queue.json')
        push_gitlab('queue.json')

        bot.send_message(MOD_ID, f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ü–∏—Ç–∞—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º {quote_id}!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['clear_queue'])
def clear_queue(message):
    if message.chat.id == MOD_ID:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(text='‚ûï –î–∞', callback_data=f'clear: yes'))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text='‚ûñ –ù–µ—Ç', callback_data=f'clear: no'))
        bot.send_message(MOD_ID, '–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π?', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    if not re.match(r'publish', call.data) is None:
        queue = open_json('queue.json')

        quote = sent_quotes[int(call.data[9:])]
        next_quote_id = len(queue.keys())
        queue.update({str(next_quote_id): quote})

        save_json(queue, 'queue.json')
        push_gitlab('queue.json')

        bot.edit_message_text(f'{call.message.text}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}', MOD_ID,
                              call.message.id, reply_markup=None)
    elif call.data == 'reject':
        bot.edit_message_text(f'{call.message.text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}', MOD_ID,
                              call.message.id, reply_markup=None)
    elif call.data == 'clear: yes':
        save_json(dict(), 'queue.json')

        bot.edit_message_text('–£—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π!', MOD_ID,
                              call.message.id, reply_markup=None)
        push_gitlab('queue.json')
    elif call.data == 'clear: no':
        bot.edit_message_text('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω.', MOD_ID,
                              call.message.id, reply_markup=None)
    bot.answer_callback_query(call.id)


Thread(target=bot.polling, args=()).start()
schedule.every().day.at('09:00').do(publish_quote)
schedule.every().day.at('15:00').do(publish_quote)

while True:
    schedule.run_pending()
    time.sleep(1)
