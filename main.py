import time
from threading import Thread
import schedule
import telebot
from flask import Flask, request
from backend import *

TOKEN = os.getenv('BOT_TOKEN')
SECURITY_TOKEN = os.getenv('SERVER_TOKEN')
CHANNEL_ID = '@letovo_quotes'
MOD_ID = -1001791070494
BAN_TIME = 3600

bot = telebot.TeleBot(TOKEN)

pending = {}
call_count = 0

raw_banlist = open('banlist.json', 'wb')
try:
    project.files.raw(file_path='banlist.json', ref='main', streamed=True, action=raw_banlist.write)
except gitlab.exceptions.GitlabGetError:
    pass
raw_banlist.close()

raw_queue = open('queue.json', 'wb')
try:
    project.files.raw(file_path='queue.json', ref='main', streamed=True, action=raw_queue.write)
except gitlab.exceptions.GitlabGetError:
    pass
raw_queue.close()


def format_time(value):
    return time.strftime('%H:%M:%S', time.gmtime(value))


def publish_quote():
    queue = open_json('queue.json')

    if queue == dict():
        bot.send_message(MOD_ID, text='–¶–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! :(')
        return

    bot.send_message(CHANNEL_ID, text=queue['0'])

    for key in range(len(queue.keys()) - 1):
        queue[str(key)] = queue[str(int(key) + 1)]
    queue.pop(str(len(queue.keys()) - 1))

    save_json(queue, 'queue.json')
    push_gitlab('queue.json')


@bot.message_handler(commands=['start'])
def hello(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ "–ó–∞–±–∞–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –õ–µ—Ç–æ–≤–æ". –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É: '
                     'https://t.me/letovo_quotes. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å–µ, —á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–º (—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /suggest), –≥–ª–∞–≤–Ω–æ–µ, —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã :)')


@bot.message_handler(commands=['suggest'])
def suggest(message):
    global pending, call_count
    quote = reformat_quote(message.text[9:])
    author = message.from_user.username
    author_id = str(message.from_user.id)
    if author is None:
        author = message.from_user.first_name + ' ' + message.from_user.last_name
    if quote:
        for i in pending.keys():
            if check_similarity(pending[i]['text'], quote) > 75:
                bot.send_message(message.chat.id,
                                 '–ü–æ–¥–æ–±–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É! –§–ª—É–¥–∏—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç, –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ :)')
                return

        banlist = open_json('banlist.json')
        if author_id in banlist.keys() and int(time.time()) > banlist[author_id]:
            banlist.pop(author_id)
            save_json(banlist, 'banlist.json')
            push_gitlab('banlist.json')
        if author_id not in banlist.keys():
            bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—é —Ü–∏—Ç–∞—Ç—É –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É :)')
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton(text='üîî –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'publish: {call_count}'))
            pending.update({call_count: {'text': quote}})

            keyboard.add(telebot.types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'reject: {call_count}'))
            keyboard.add(
                telebot.types.InlineKeyboardButton(text='‚úé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit: {call_count}'))
            sent_quote = bot.send_message(MOD_ID,
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{author} [ID: {author_id}] –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote}',
                                          reply_markup=keyboard)
            bot.pin_chat_message(MOD_ID, sent_quote.message_id)
            pending[call_count]['object'] = sent_quote
            pending[call_count]['author_id'] = author_id
            call_count += 1
        else:
            bot.send_message(message.chat.id,
                             f'–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {format_time(banlist[author_id] - int(time.time()))}')
    else:
        bot.send_message(message.chat.id,
                         '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É. –í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /suggest –∏ –∂–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. '
                         '–ò, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏ –µ—Ä—É–Ω–¥—É!')


@bot.message_handler(commands=['ban'])
def ban(message):
    if message.chat.id == MOD_ID:
        args = message.text[5:].split(' ')
        if len(args) >= 2:
            user_id, period = args[0], args[1]

            if not period.isdigit():
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                return
        elif len(args) == 1:
            user_id = args[0]
            period = BAN_TIME
        else:
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return

        if not user_id.isdigit():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        banlist = open_json('banlist.json')

        banlist.update({user_id: int(time.time()) + int(period)})

        save_json(banlist, 'banlist.json')
        push_gitlab('banlist.json')
        bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['unban'])
def unban(message):
    if message.chat.id == MOD_ID:
        user_id = message.text[6:].replace(' ', '')
        if not user_id.isdigit():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        banlist = open_json('banlist.json')

        if user_id not in banlist.keys():
            bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
            return
        else:
            banlist.pop(user_id)

        save_json(banlist, 'banlist.json')
        push_gitlab('banlist.json')
        bot.send_message(MOD_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['queue'])
def add_queue(message):
    if message.chat.id == MOD_ID:
        if len(message.text) == 6:
            bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä!')
            return
        queue = open_json('queue.json')

        next_quote_id = len(queue.keys())
        quote = message.text[7:]
        queue.update({str(next_quote_id): quote})

        save_json(queue, 'queue.json')
        push_gitlab('queue.json')
        bot.send_message(MOD_ID, '–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get_queue'])
def get_queue(message):
    if message.chat.id == MOD_ID:
        queue = open_json('queue.json')

        if queue == dict():
            bot.send_message(MOD_ID, '–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞!')
            return

        for quote_id, quote in queue.items():
            bot.send_message(MOD_ID, f'#*{quote_id}*\n{quote}', parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get_banlist'])
def get_banlist(message):
    if message.chat.id == MOD_ID:
        banlist = open_json('banlist.json')

        if banlist == dict():
            bot.send_message(MOD_ID, '–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!')
            return

        bot.send_message(MOD_ID, 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
        for key, value in banlist.items():
            bot.send_message(MOD_ID, key + ': ' + format_time(int(value)))
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['del_queue'])
def del_queue(message):
    if message.chat.id == MOD_ID:
        if len(message.text) == 10:
            bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä!')
            return

        queue = open_json('queue.json')

        quote_id = message.text[10:].replace(' ', '')
        if quote_id not in queue.keys():
            bot.send_message(message.chat.id, '–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            return

        for key in range(int(quote_id), len(queue.keys()) - 1):
            queue[str(key)] = queue[str(int(key) + 1)]
        queue.pop(str(len(queue.keys()) - 1))

        save_json(queue, 'queue.json')
        push_gitlab('queue.json')

        bot.send_message(MOD_ID, f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ü–∏—Ç–∞—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º {quote_id}!')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['clear_queue'])
def clear_queue(message):
    if message.chat.id == MOD_ID:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(text='‚ûï –î–∞', callback_data=f'clear: yes'))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text='‚ûñ –ù–µ—Ç', callback_data=f'clear: no'))
        bot.send_message(MOD_ID, '–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π?', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['edit_quote'])
def edit_quote(message):
    if message.chat.id == MOD_ID:
        args = message.text[12:].split('; ')
        if len(args) == 2:
            quote_id, new_text = args
            queue = open_json('queue.json')

            if quote_id in queue.keys():
                queue[quote_id] = new_text
            else:
                bot.send_message(MOD_ID, '–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                return

            save_json(queue, 'queue.json')
            push_gitlab('queue.json')

            bot.send_message(MOD_ID, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Ü–∏—Ç–∞—Ç—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {quote_id}!')
        else:
            bot.send_message(MOD_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    action = call.data.split(':')

    if action[0] in ['publish', 'reject', 'edit']:
        actual_quote_id = int(action[1])
        quote = pending[actual_quote_id]['text']

        if actual_quote_id not in pending.keys():
            bot.reply_to(call.message,
                         '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏—Ç–∞—Ç—ã :( –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø—Ä–æ–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é.')
            return

        author_id = pending[actual_quote_id]['author_id']

        if action[0] == 'publish':
            queue = open_json('queue.json')

            next_quote_id = len(queue.keys())
            queue.update({str(next_quote_id): quote})

            save_json(queue, 'queue.json')
            push_gitlab('queue.json')

            bot.edit_message_text(f'{call.message.text}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}', MOD_ID,
                                  call.message.id, reply_markup=None)
            bot.send_message(author_id, '–í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!')

        elif action[0] == 'reject':
            bot.edit_message_text(f'{call.message.text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}', MOD_ID,
                                  call.message.id, reply_markup=None)
            bot.send_message(author_id, '–í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ :(')

        elif action[0] == 'edit':
            bot.send_message(MOD_ID, '–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
            bot.send_message(MOD_ID, quote)

            bot.edit_message_text(f'{call.message.text}\n\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}',
                                  MOD_ID,
                                  call.message.id, reply_markup=None)
            bot.send_message(author_id, '–í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!')

        bot.unpin_chat_message(MOD_ID, pending[actual_quote_id]['object'].message_id)
        pending.pop(actual_quote_id)

    else:
        if call.data == 'clear: yes':
            save_json(dict(), 'queue.json')
            push_gitlab('queue.json')

            bot.edit_message_text('–£—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π!', MOD_ID,
                                  call.message.id, reply_markup=None)
        elif call.data == 'clear: no':
            bot.edit_message_text('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω.', MOD_ID,
                                  call.message.id, reply_markup=None)

    bot.answer_callback_query(call.id)


if __name__ == '__main__':
    if 'HEROKU' in os.environ.keys():
        server = Flask('__main__')


        @server.route(f'/bot{SECURITY_TOKEN}', methods=['POST'])
        def get_messages():
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode('utf-8'))])
            return '!', 200


        @server.route('/')
        def webhook():
            bot.remove_webhook()
            bot.set_webhook(url=f'https://letovo-quotes.herokuapp.com/bot{SECURITY_TOKEN}')
            return '?', 200


        Thread(target=server.run, args=('0.0.0.0', os.environ.get('PORT', 80))).start()
    else:
        bot.remove_webhook()
        Thread(target=bot.polling, args=()).start()

schedule.every().day.at('09:00').do(publish_quote)
schedule.every().day.at('15:00').do(publish_quote)

while True:
    schedule.run_pending()
    time.sleep(1)
